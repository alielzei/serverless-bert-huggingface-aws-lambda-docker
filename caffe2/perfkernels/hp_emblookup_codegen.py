from __future__ import absolute_import, division, print_function, unicode_literals
import argparse
import sys
sizeof = {'float': 4, 'at::Half': 2, 'uint8_t': 1}

def unroll(uf, IndexType, InType, OutType, use_weights, isa, fused, use_offsets):
    import custom_funtemplate
    return custom_funtemplate.rewrite_template('caffe2.perfkernels.hp_emblookup_codegen.unroll', 'unroll(uf, IndexType, InType, OutType, use_weights, isa, fused, use_offsets)', {'sizeof': sizeof, 'uf': uf, 'IndexType': IndexType, 'InType': InType, 'OutType': OutType, 'use_weights': use_weights, 'isa': isa, 'fused': fused, 'use_offsets': use_offsets}, 1)

def generic(IndexType, InType, OutType, use_weights, isa, fused, use_offsets):
    import custom_funtemplate
    return custom_funtemplate.rewrite_template('caffe2.perfkernels.hp_emblookup_codegen.generic', 'generic(IndexType, InType, OutType, use_weights, isa, fused, use_offsets)', {'IndexType': IndexType, 'InType': InType, 'OutType': OutType, 'use_weights': use_weights, 'isa': isa, 'fused': fused, 'use_offsets': use_offsets}, 1)
parser = argparse.ArgumentParser()
parser.add_argument('-f', '--filename', help='file name')
parser.add_argument('--fused', action='store_true')
parser.add_argument('--use-offsets', action='store_true')
opts = parser.parse_args()
if opts.filename:
    filename = opts.filename
elif opts.fused:
    if opts.use_offsets:
        filename = 'embedding_lookup_fused_8bit_rowwise_idx_avx2.cc'
    else:
        filename = 'embedding_lookup_fused_8bit_rowwise_avx2.cc'
elif opts.use_offsets:
    filename = 'embedding_lookup_idx_avx2.cc'
else:
    filename = 'embedding_lookup_avx2.cc'
options = [['int32_t', 'int', 'float', 'float', 'float', 'float'], ['int64_t', 'int64_t', 'float', 'float', 'float', 'float'], ['int32_t', 'int', 'half', 'at::Half', 'float', 'float'], ['int64_t', 'int64_t', 'half', 'at::Half', 'float', 'float'], ['int32_t', 'int', 'uint8_t', 'uint8_t', 'float', 'float'], ['int64_t', 'int64_t', 'uint8_t', 'uint8_t', 'float', 'float']]
code = []
code.append('//// --------------------------')
code.append('//// ATTENTION:')
code.append('//// THIS CODE IS AUTOGENERATED')
code.append('//// BY {}'.format(sys.argv[0]))
code.append('//// DO NOT MODIFY!!!')
code.append('//// --------------------------\n')
code.append('#include <c10/util/Half.h>')
code.append('#include <immintrin.h>')
code.append('namespace caffe2 {\n')
for o in options:
    [IndexTypeName, IndexType, InTypeName, InType, OutTypeName, OutType] = o
    prefix = ('Fused8BitRowwise' if opts.fused else '')
    code.append('template <bool IS_WEIGHT_POSITIONAL>')
    if opts.use_offsets:
        fn_base = '{}EmbeddingLookupIdx_{}_{}_{}'.format(prefix, IndexTypeName, InTypeName, OutTypeName)
    else:
        fn_base = '{}EmbeddingLookup_{}_{}_{}'.format(prefix, IndexTypeName, InTypeName, OutTypeName)
    suffix = '__avx2_fma'
    fn = 'static bool ' + fn_base + suffix
    code.append(fn + '(')
    args = []
    args.append('    const int64_t block_size,')
    args.append('    const int64_t output_size,')
    args.append('    const int64_t index_size,')
    args.append('    const int64_t data_size,')
    args.append('    const ' + InType + '* input,')
    args.append('    const ' + IndexType + '* indices,')
    if opts.use_offsets:
        args.append('    const int64_t* offsets,')
    else:
        args.append('    const int* lengths,')
    args.append('    const float* weights,')
    if not opts.fused:
        args.append('    const float* scale_bias,')
    args.append('    bool normalize_by_lengths,')
    args.append('    ' + OutType + '* out) {')
    code += args
    code.append('  const ' + IndexType + ' prefdist_T0 = 16;')
    offset = (8 // sizeof[InType] if opts.fused else 0)
    code.append('  const {} fused_block_size = block_size + {};'.format(IndexType, offset))
    if opts.use_offsets:
        code.append('  int64_t dataInd = 0;')
    else:
        code.append('  ' + IndexType + ' dataInd = 0;')
    code.append('  if (block_size == 128) {')
    code += unroll(16, IndexType, InType, OutType, True, 'AVX2', opts.fused, opts.use_offsets)
    code.append('  } else if (block_size == 64) {')
    code += unroll(8, IndexType, InType, OutType, True, 'AVX2', opts.fused, opts.use_offsets)
    code.append('  } else if (block_size == 32) {')
    code += unroll(4, IndexType, InType, OutType, True, 'AVX2', opts.fused, opts.use_offsets)
    code.append('  } else if (block_size == 16) {')
    code += unroll(2, IndexType, InType, OutType, True, 'AVX2', opts.fused, opts.use_offsets)
    code.append('  } else {')
    code.append('    // generic code')
    code += generic(IndexType, InType, OutType, True, 'AVX2', opts.fused, opts.use_offsets)
    code.append('  }')
    code.append('  return dataInd == index_size;')
    code.append('}')
    for is_weight_positional in ['false', 'true']:
        code.append('bool ' + fn_base + '_' + is_weight_positional + suffix + '(')
        code += args
        extra_space = '\n      '
        ret_string = '  return ' + fn_base + suffix + '<' + is_weight_positional + '>('
        if len(ret_string) <= 80:
            code.append(ret_string)
        else:
            code.append('  return ' + fn_base + suffix + '<' + extra_space + is_weight_positional + '>(')
        code.append('      block_size,')
        code.append('      output_size,')
        code.append('      index_size,')
        code.append('      data_size,')
        code.append('      input,')
        code.append('      indices,')
        if opts.use_offsets:
            code.append('      offsets,')
        else:
            code.append('      lengths,')
        code.append('      weights,')
        if not opts.fused:
            code.append('      scale_bias,')
        code.append('      normalize_by_lengths,')
        code.append('      out);')
        code.append('}')
    code.append('')
code.append('} // namespace caffe2')
with open(filename, 'w') as fout:
    for c in code:
        fout.write(c + '\n')
print('Created ' + filename)

