import os
import genapi
from genapi import TypeApi, GlobalVarApi, FunctionApi, BoolValuesApi
import numpy_api
h_template = '\n#if defined(_MULTIARRAYMODULE) || defined(WITH_CPYCHECKER_STEALS_REFERENCE_TO_ARG_ATTRIBUTE)\n\ntypedef struct {\n        PyObject_HEAD\n        npy_bool obval;\n} PyBoolScalarObject;\n\nextern NPY_NO_EXPORT PyTypeObject PyArrayMapIter_Type;\nextern NPY_NO_EXPORT PyTypeObject PyArrayNeighborhoodIter_Type;\nextern NPY_NO_EXPORT PyBoolScalarObject _PyArrayScalar_BoolValues[2];\n\n%s\n\n#else\n\n#if defined(PY_ARRAY_UNIQUE_SYMBOL)\n#define PyArray_API PY_ARRAY_UNIQUE_SYMBOL\n#endif\n\n#if defined(NO_IMPORT) || defined(NO_IMPORT_ARRAY)\nextern void **PyArray_API;\n#else\n#if defined(PY_ARRAY_UNIQUE_SYMBOL)\nvoid **PyArray_API;\n#else\nstatic void **PyArray_API=NULL;\n#endif\n#endif\n\n%s\n\n#if !defined(NO_IMPORT_ARRAY) && !defined(NO_IMPORT)\nstatic int\n_import_array(void)\n{\n  int st;\n  PyObject *numpy = PyImport_ImportModule("numpy.core._multiarray_umath");\n  PyObject *c_api = NULL;\n\n  if (numpy == NULL) {\n      return -1;\n  }\n  c_api = PyObject_GetAttrString(numpy, "_ARRAY_API");\n  Py_DECREF(numpy);\n  if (c_api == NULL) {\n      PyErr_SetString(PyExc_AttributeError, "_ARRAY_API not found");\n      return -1;\n  }\n\n  if (!PyCapsule_CheckExact(c_api)) {\n      PyErr_SetString(PyExc_RuntimeError, "_ARRAY_API is not PyCapsule object");\n      Py_DECREF(c_api);\n      return -1;\n  }\n  PyArray_API = (void **)PyCapsule_GetPointer(c_api, NULL);\n  Py_DECREF(c_api);\n  if (PyArray_API == NULL) {\n      PyErr_SetString(PyExc_RuntimeError, "_ARRAY_API is NULL pointer");\n      return -1;\n  }\n\n  /* Perform runtime check of C API version */\n  if (NPY_VERSION != PyArray_GetNDArrayCVersion()) {\n      PyErr_Format(PyExc_RuntimeError, "module compiled against "\\\n             "ABI version 0x%%x but this version of numpy is 0x%%x", \\\n             (int) NPY_VERSION, (int) PyArray_GetNDArrayCVersion());\n      return -1;\n  }\n  if (NPY_FEATURE_VERSION > PyArray_GetNDArrayCFeatureVersion()) {\n      PyErr_Format(PyExc_RuntimeError, "module compiled against "\\\n             "API version 0x%%x but this version of numpy is 0x%%x . "\\\n             "Check the section C-API incompatibility at the "\\\n             "Troubleshooting ImportError section at "\\\n             "https://numpy.org/devdocs/user/troubleshooting-importerror.html"\\\n             "#c-api-incompatibility "\\\n              "for indications on how to solve this problem .", \\\n             (int) NPY_FEATURE_VERSION, (int) PyArray_GetNDArrayCFeatureVersion());\n      return -1;\n  }\n\n  /*\n   * Perform runtime check of endianness and check it matches the one set by\n   * the headers (npy_endian.h) as a safeguard\n   */\n  st = PyArray_GetEndianness();\n  if (st == NPY_CPU_UNKNOWN_ENDIAN) {\n      PyErr_SetString(PyExc_RuntimeError,\n                      "FATAL: module compiled as unknown endian");\n      return -1;\n  }\n#if NPY_BYTE_ORDER == NPY_BIG_ENDIAN\n  if (st != NPY_CPU_BIG) {\n      PyErr_SetString(PyExc_RuntimeError,\n                      "FATAL: module compiled as big endian, but "\n                      "detected different endianness at runtime");\n      return -1;\n  }\n#elif NPY_BYTE_ORDER == NPY_LITTLE_ENDIAN\n  if (st != NPY_CPU_LITTLE) {\n      PyErr_SetString(PyExc_RuntimeError,\n                      "FATAL: module compiled as little endian, but "\n                      "detected different endianness at runtime");\n      return -1;\n  }\n#endif\n\n  return 0;\n}\n\n#define import_array() {if (_import_array() < 0) {PyErr_Print(); PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import"); return NULL; } }\n\n#define import_array1(ret) {if (_import_array() < 0) {PyErr_Print(); PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import"); return ret; } }\n\n#define import_array2(msg, ret) {if (_import_array() < 0) {PyErr_Print(); PyErr_SetString(PyExc_ImportError, msg); return ret; } }\n\n#endif\n\n#endif\n'
c_template = '\n/* These pointers will be stored in the C-object for use in other\n    extension modules\n*/\n\nvoid *PyArray_API[] = {\n%s\n};\n'
c_api_header = '\n===========\nNumPy C-API\n===========\n'

def generate_api(output_dir, force=False):
    import custom_funtemplate
    return custom_funtemplate.rewrite_template('numpy.core.generate_numpy_api.generate_api', 'generate_api(output_dir, force=False)', {'os': os, 'numpy_api': numpy_api, 'genapi': genapi, '__file__': __file__, 'do_generate_api': do_generate_api, 'output_dir': output_dir, 'force': force}, 1)

def do_generate_api(targets, sources):
    import custom_funtemplate
    return custom_funtemplate.rewrite_template('numpy.core.generate_numpy_api.do_generate_api', 'do_generate_api(targets, sources)', {'genapi': genapi, 'FunctionApi': FunctionApi, 'GlobalVarApi': GlobalVarApi, 'BoolValuesApi': BoolValuesApi, 'TypeApi': TypeApi, 'h_template': h_template, 'c_template': c_template, 'c_api_header': c_api_header, 'targets': targets, 'sources': sources}, 1)

